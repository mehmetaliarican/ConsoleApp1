// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ConsoleApp1.Models.Generated;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ConsoleApp1.Models.Generated;

namespace ConsoleApp1.Data
{
    public partial class CuzdantestContext : DbContext
    {
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Approval> Approvals { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<BankAccountTransaction> BankAccountTransactions { get; set; }
        public virtual DbSet<BlockStatusHistory> BlockStatusHistories { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<CurrencyType> CurrencyTypes { get; set; }
        public virtual DbSet<DeviceSetting> DeviceSettings { get; set; }
        public virtual DbSet<FraudRule> FraudRules { get; set; }
        public virtual DbSet<FraudRuleTransection> FraudRuleTransections { get; set; }
        public virtual DbSet<FrequentlyUsingAccount> FrequentlyUsingAccounts { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceCorporation> InvoiceCorporations { get; set; }
        public virtual DbSet<InvoiceSektor> InvoiceSektors { get; set; }
        public virtual DbSet<LoadMoneyRequest> LoadMoneyRequests { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Mail> Mail { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MobileDeviceLog> MobileDeviceLogs { get; set; }
        public virtual DbSet<MoneyWithdrawRequest> MoneyWithdrawRequests { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleClaim> RoleClaims { get; set; }
        public virtual DbSet<ServiceLog> ServiceLogs { get; set; }
        public virtual DbSet<Sm> Sms { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionChanel> TransactionChanels { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserToken> UserTokens { get; set; }

        public CuzdantestContext(DbContextOptions<CuzdantestContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account");

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.CurrencyTypeId);

                entity.HasIndex(e => e.PersonId);

                entity.HasIndex(e => e.UpdateId);

                entity.Property(e => e.AccountNumber).HasMaxLength(24);

                entity.Property(e => e.Comment).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.SuspentionIssue).HasMaxLength(300);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.AccountCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.CurrencyType)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.CurrencyTypeId);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.AccountPeople)
                    .HasForeignKey(d => d.PersonId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.AccountUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<Approval>(entity =>
            {
                entity.ToTable("Approval");

                entity.Property(e => e.Comment).HasMaxLength(200);

                entity.Property(e => e.OperationComment).HasMaxLength(200);

                entity.Property(e => e.TableId).HasMaxLength(10);

                entity.Property(e => e.TableName).HasMaxLength(100);
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.ToTable("Bank");

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Code).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId);

                entity.HasIndex(e => e.BankId);

                entity.Property(e => e.AccountId).HasDefaultValueSql("''::text");

                entity.Property(e => e.BranchCode).HasMaxLength(20);

                entity.Property(e => e.BranchName).HasMaxLength(50);

                entity.Property(e => e.CurrencyCode).HasMaxLength(5);

                entity.Property(e => e.Iban)
                    .HasColumnName("IBAN")
                    .HasMaxLength(30);

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.BankId);
            });

            modelBuilder.Entity<BankAccountTransaction>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.BankAccountId });

                entity.HasIndex(e => e.BankAccountId);

                entity.HasIndex(e => e.LoadedAccountId);

                entity.Property(e => e.BankAccountId).HasDefaultValueSql("''::text");

                entity.Property(e => e.Amount).HasColumnType("numeric");

                entity.Property(e => e.Balance).HasColumnType("numeric");

                entity.Property(e => e.CreateDate).HasDefaultValueSql("'0001-01-01 00:00:00'::timestamp without time zone");

                entity.Property(e => e.NetBalance).HasColumnType("numeric");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.BankAccountTransactions)
                    .HasForeignKey(d => d.BankAccountId);

                entity.HasOne(d => d.LoadedAccount)
                    .WithMany(p => p.BankAccountTransactions)
                    .HasForeignKey(d => d.LoadedAccountId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<BlockStatusHistory>(entity =>
            {
                entity.ToTable("BlockStatusHistory");

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.PersonId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.BlockStatusHistoryCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.BlockStatusHistoryPeople)
                    .HasForeignKey(d => d.PersonId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.BlockStatusHistoryUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<Commission>(entity =>
            {
                entity.ToTable("Commission");

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.Type).HasMaxLength(5);
            });

            modelBuilder.Entity<CurrencyType>(entity =>
            {
                entity.ToTable("CurrencyType");

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Sign).HasMaxLength(1);
            });

            modelBuilder.Entity<DeviceSetting>(entity =>
            {
                entity.ToTable("DeviceSetting");

                entity.Property(e => e.Osplatform).HasColumnName("OSPlatform");
            });

            modelBuilder.Entity<FraudRule>(entity =>
            {
                entity.ToTable("FraudRule");

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.FraudRuleCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.FraudRuleUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<FraudRuleTransection>(entity =>
            {
                entity.ToTable("FraudRuleTransection");

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.FraudRuleId);

                entity.HasIndex(e => e.TransectionId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.FraudRuleTransectionCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.FraudRule)
                    .WithMany(p => p.FraudRuleTransections)
                    .HasForeignKey(d => d.FraudRuleId);

                entity.HasOne(d => d.Transection)
                    .WithMany(p => p.FraudRuleTransections)
                    .HasForeignKey(d => d.TransectionId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.FraudRuleTransectionUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<FrequentlyUsingAccount>(entity =>
            {
                entity.HasIndex(e => e.AccountId);

                entity.HasIndex(e => e.PersonId);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FrequentlyUsingAccounts)
                    .HasForeignKey(d => d.AccountId);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.FrequentlyUsingAccounts)
                    .HasForeignKey(d => d.PersonId);
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("Invoice");

                entity.HasIndex(e => e.CorpoCode);

                entity.HasIndex(e => e.TransactionId);

                entity.Property(e => e.CorpoCode).HasMaxLength(10);

                entity.Property(e => e.SubscriberNo).HasColumnName("subscriberNo");

                entity.HasOne(d => d.CorpoCodeNavigation)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.CorpoCode)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.TransactionId);
            });

            modelBuilder.Entity<InvoiceCorporation>(entity =>
            {
                entity.ToTable("InvoiceCorporation");

                entity.HasIndex(e => e.InvoiceSektorId);

                entity.Property(e => e.Id).HasMaxLength(10);

                entity.Property(e => e.InvoiceSektorId).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.HasOne(d => d.InvoiceSektor)
                    .WithMany(p => p.InvoiceCorporations)
                    .HasForeignKey(d => d.InvoiceSektorId);
            });

            modelBuilder.Entity<InvoiceSektor>(entity =>
            {
                entity.ToTable("InvoiceSektor");

                entity.Property(e => e.Id).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<LoadMoneyRequest>(entity =>
            {
                entity.ToTable("LoadMoneyRequest");

                entity.HasIndex(e => e.AccountId);

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.LoadMoneyRequests)
                    .HasForeignKey(d => d.AccountId);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.LoadMoneyRequestCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.LoadMoneyRequestUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.ToTable("Log");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("Menu");

                entity.HasIndex(e => e.ParentId);

                entity.Property(e => e.Id).HasIdentityOptions(200L, null, null, null, null, null);

                entity.Property(e => e.Action).HasMaxLength(50);

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.Controller).HasMaxLength(50);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.Section).HasMaxLength(50);

                entity.Property(e => e.Text).HasMaxLength(50);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<MobileDeviceLog>(entity =>
            {
                entity.ToTable("MobileDeviceLog");

                entity.Property(e => e.Osplatform).HasColumnName("OSPlatform");

                entity.Property(e => e.OsreleaseName).HasColumnName("OSReleaseName");

                entity.Property(e => e.Ossdk).HasColumnName("OSSDK");

                entity.Property(e => e.Osversion).HasColumnName("OSVersion");
            });

            modelBuilder.Entity<MoneyWithdrawRequest>(entity =>
            {
                entity.ToTable("MoneyWithdrawRequest");

                entity.HasIndex(e => e.AccountId);

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.MoneyWithdrawRequests)
                    .HasForeignKey(d => d.AccountId);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.MoneyWithdrawRequestCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.MoneyWithdrawRequestUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.HasKey(e => new { e.ObjectTypeId, e.UserId });

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("Person");

                entity.HasIndex(e => e.BlockingPersonId);

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.UpdateId);

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.BlockingComment).HasMaxLength(200);

                entity.Property(e => e.Family).HasMaxLength(50);

                entity.Property(e => e.Iban)
                    .HasColumnName("IBAN")
                    .HasMaxLength(30);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NationalId).HasMaxLength(12);

                entity.HasOne(d => d.BlockingPerson)
                    .WithMany(p => p.InverseBlockingPerson)
                    .HasForeignKey(d => d.BlockingPersonId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.InverseCreator)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.InverseUpdate)
                    .HasForeignKey(d => d.UpdateId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<Receipt>(entity =>
            {
                entity.ToTable("Receipt");

                entity.HasIndex(e => e.TransactionId)
                    .IsUnique();

                entity.HasOne(d => d.Transaction)
                    .WithOne(p => p.Receipt)
                    .HasForeignKey<Receipt>(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("Report");

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.UpdateId);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.ReportCreators)
                    .HasForeignKey(d => d.CreatorId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.ReportUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<ServiceLog>(entity =>
            {
                entity.ToTable("ServiceLog");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.ToTable("Transaction");

                entity.HasIndex(e => e.AccountId);

                entity.HasIndex(e => e.ConfirmId);

                entity.HasIndex(e => e.CreatorId);

                entity.HasIndex(e => e.InvoiceId);

                entity.HasIndex(e => e.MoneyTransferBankId);

                entity.HasIndex(e => e.ParentTransactionId);

                entity.HasIndex(e => e.TransactionChanelId);

                entity.HasIndex(e => e.TransactionTypeId);

                entity.HasIndex(e => e.UpdateId);

                entity.Property(e => e.Comment).HasMaxLength(200);

                entity.Property(e => e.Ip)
                    .HasColumnName("IP")
                    .HasMaxLength(20);

                entity.Property(e => e.QueryKey).HasMaxLength(200);

                entity.Property(e => e.RefNo)
                    .HasColumnName("refNo")
                    .HasMaxLength(200);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.AccountId);

                entity.HasOne(d => d.Confirm)
                    .WithMany(p => p.TransactionConfirms)
                    .HasForeignKey(d => d.ConfirmId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.Creator)
                    .WithMany(p => p.TransactionCreators)
                    .HasForeignKey(d => d.CreatorId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.InvoiceId);

                entity.HasOne(d => d.MoneyTransferBank)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.MoneyTransferBankId);

                entity.HasOne(d => d.ParentTransaction)
                    .WithMany(p => p.InverseParentTransaction)
                    .HasForeignKey(d => d.ParentTransactionId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(d => d.TransactionChanel)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.TransactionChanelId);

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.TransactionTypeId);

                entity.HasOne(d => d.Update)
                    .WithMany(p => p.TransactionUpdates)
                    .HasForeignKey(d => d.UpdateId);
            });

            modelBuilder.Entity<TransactionChanel>(entity =>
            {
                entity.ToTable("TransactionChanel");

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.ToTable("TransactionType");

                entity.Property(e => e.Id).HasIdentityOptions(100L, null, null, null, null, null);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.LockoutEnd).HasColumnType("timestamp with time zone");
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ProviderKey });
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.UserId });
            });

            modelBuilder.Entity<UserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Value });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}